# Dockerfile for development purposes.
# Read docs/development.md for more information
# vi: ft=dockerfile


###############################################################################
# Base build image
FROM golang:1.19-alpine AS build_base
RUN apk add bash ca-certificates git gcc g++ libc-dev
WORKDIR /go/src/github.com/weaviate/weaviate
ENV GO111MODULE=on

###############################################################################
# This image builds the weaviate server
FROM build_base AS server_builder
ARG TARGETARCH
ARG GITHASH="unknown"
ARG EXTRA_BUILD_ARGS=""
COPY . .
#GW
#COPY go.mod.docker go.mod
#RUN pwd
#RUN ls /go/src/github.com/weaviate
#RUN ls /go/src/github.com/weaviate/weaviate
#RUN pwd && echo "hello"
#RUN ls -als
#WORKS - RUN go mod edit -replace example.com/gemini=/go/src/github.com/weaviate/weaviate/gsi/gemini
RUN go mod edit -replace example.com/gemini=./gsi/gemini
RUN go mod tidy
#GW
RUN GOOS=linux GOARCH=$TARGETARCH go build $EXTRA_BUILD_ARGS \
      -ldflags '-w -extldflags "-static" -X github.com/weaviate/weaviate/usecases/config.GitHash='"$GITHASH"'' \
      -o /weaviate-server ./cmd/weaviate-server

###############################################################################
# This creates an image that can be used to fake an api for telemetry acceptance test purposes
FROM build_base AS telemetry_mock_api
COPY . .
ENTRYPOINT ["./tools/dev/telemetry_mock_api.sh"]

###############################################################################
# Weaviate (no differentiation between dev/test/prod - 12 factor!)
FROM alpine AS weaviate
ENTRYPOINT ["/bin/weaviate"]
COPY --from=server_builder /weaviate-server /bin/weaviate
RUN apk add --no-cache --upgrade ca-certificates openssl
RUN mkdir ./modules
CMD [ "--host", "0.0.0.0", "--port", "8081", "--scheme", "http"]
